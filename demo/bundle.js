(()=>{var e={843:(e,t,n)=>{e.exports={ResizeSensor:n(87),ElementQueries:n(456)}},456:function(e,t,n){"use strict";var i,o,r;"undefined"!=typeof window&&window,o=[n(87)],void 0===(r="function"==typeof(i=function(e){var t=function(){var t,n={},i=[];function o(e){e||(e=document.documentElement);var t=window.getComputedStyle(e,null).fontSize;return parseFloat(t)||16}function r(e,t){var n=t.split(/\d/),i=n[n.length-1];switch(t=parseFloat(t),i){case"px":default:return t;case"em":return t*o(e);case"rem":return t*o();case"vw":return t*document.documentElement.clientWidth/100;case"vh":return t*document.documentElement.clientHeight/100;case"vmin":case"vmax":var r=document.documentElement.clientWidth/100,s=document.documentElement.clientHeight/100;return t*(0,Math["vmin"===i?"min":"max"])(r,s)}}function s(e,t){var i,o,s,a,u,l,d,c;this.element=e;var h=["min-width","min-height","max-width","max-height"];this.call=function(){for(i in s=function(e){if(!e.getBoundingClientRect)return{width:e.offsetWidth,height:e.offsetHeight};var t=e.getBoundingClientRect();return{width:Math.round(t.width),height:Math.round(t.height)}}(this.element),l={},n[t])n[t].hasOwnProperty(i)&&(o=n[t][i],a=r(this.element,o.value),u="width"===o.property?s.width:s.height,c=o.mode+"-"+o.property,d="","min"===o.mode&&u>=a&&(d+=o.value),"max"===o.mode&&u<=a&&(d+=o.value),l[c]||(l[c]=""),d&&-1===(" "+l[c]+" ").indexOf(" "+d+" ")&&(l[c]+=" "+d));for(var e in h)h.hasOwnProperty(e)&&(l[h[e]]?this.element.setAttribute(h[e],l[h[e]].substr(1)):this.element.removeAttribute(h[e]))}}function a(t,n){t.elementQueriesSetupInformation||(t.elementQueriesSetupInformation=new s(t,n)),t.elementQueriesSensor||(t.elementQueriesSensor=new e(t,(function(){t.elementQueriesSetupInformation.call()})))}function u(e,o,r,s){if(void 0===n[e]){n[e]=[];var a=i.length;t.innerHTML+="\n"+e+" {animation: 0.1s element-queries;}",t.innerHTML+="\n"+e+" > .resize-sensor {min-width: "+a+"px;}",i.push(e)}n[e].push({mode:o,property:r,value:s})}function l(e){var t;if(document.querySelectorAll&&(t=e?e.querySelectorAll.bind(e):document.querySelectorAll.bind(document)),t||"undefined"==typeof $$||(t=$$),t||"undefined"==typeof jQuery||(t=jQuery),!t)throw"No document.querySelectorAll, jQuery or Mootools's $$ found.";return t}function d(t){var n=[],i=[],o=[],r=0,s=-1,a=[];for(var u in t.children)if(t.children.hasOwnProperty(u)&&t.children[u].tagName&&"img"===t.children[u].tagName.toLowerCase()){n.push(t.children[u]);var l=t.children[u].getAttribute("min-width")||t.children[u].getAttribute("data-min-width"),d=t.children[u].getAttribute("data-src")||t.children[u].getAttribute("url");o.push(d);var c={minWidth:l};i.push(c),l?t.children[u].style.display="none":(r=n.length-1,t.children[u].style.display="block")}function h(){var e,u=!1;for(e in n)n.hasOwnProperty(e)&&i[e].minWidth&&t.offsetWidth>i[e].minWidth&&(u=e);if(u||(u=r),s!==u)if(a[u])n[s].style.display="none",n[u].style.display="block",s=u;else{var l=new Image;l.onload=function(){n[u].src=o[u],n[s].style.display="none",n[u].style.display="block",a[u]=!0,s=u},l.src=o[u]}else n[u].src=o[u]}s=r,t.resizeSensorInstance=new e(t,h),h()}var c=/,?[\s\t]*([^,\n]*?)((?:\[[\s\t]*?(?:min|max)-(?:width|height)[\s\t]*?[~$\^]?=[\s\t]*?"[^"]*?"[\s\t]*?])+)([^,\n\s\{]*)/gim,h=/\[[\s\t]*?(min|max)-(width|height)[\s\t]*?[~$\^]?=[\s\t]*?"([^"]*?)"[\s\t]*?]/gim;function m(e){var t,n,i,o;for(e=e.replace(/'/g,'"');null!==(t=c.exec(e));)for(n=t[1]+t[3],i=t[2];null!==(o=h.exec(i));)u(n,o[1],o[2],o[3])}function f(e){var t="";if(e)if("string"==typeof e)-1===(e=e.toLowerCase()).indexOf("min-width")&&-1===e.indexOf("max-width")||m(e);else for(var n=0,i=e.length;n<i;n++)1===e[n].type?-1!==(t=e[n].selectorText||e[n].cssText).indexOf("min-height")||-1!==t.indexOf("max-height")?m(t):-1===t.indexOf("min-width")&&-1===t.indexOf("max-width")||m(t):4===e[n].type?f(e[n].cssRules||e[n].rules):3===e[n].type&&e[n].styleSheet.hasOwnProperty("cssRules")&&f(e[n].styleSheet.cssRules)}var p=!1;this.init=function(){var n="animationstart";void 0!==document.documentElement.style.webkitAnimationName?n="webkitAnimationStart":void 0!==document.documentElement.style.MozAnimationName?n="mozanimationstart":void 0!==document.documentElement.style.OAnimationName&&(n="oanimationstart"),document.body.addEventListener(n,(function(t){var n=t.target,o=n&&window.getComputedStyle(n,null),r=o&&o.getPropertyValue("animation-name");if(r&&-1!==r.indexOf("element-queries")){n.elementQueriesSensor=new e(n,(function(){n.elementQueriesSetupInformation&&n.elementQueriesSetupInformation.call()}));var s=window.getComputedStyle(n.resizeSensor,null).getPropertyValue("min-width");s=parseInt(s.replace("px","")),a(t.target,i[s])}})),p||((t=document.createElement("style")).type="text/css",t.innerHTML="[responsive-image] > img, [data-responsive-image] {overflow: hidden; padding: 0; } [responsive-image] > img, [data-responsive-image] > img {width: 100%;}",t.innerHTML+="\n@keyframes element-queries { 0% { visibility: inherit; } }",document.getElementsByTagName("head")[0].appendChild(t),p=!0);for(var o=0,r=document.styleSheets.length;o<r;o++)try{document.styleSheets[o].href&&0===document.styleSheets[o].href.indexOf("file://")&&console.warn("CssElementQueries: unable to parse local css files, "+document.styleSheets[o].href),f(document.styleSheets[o].cssRules||document.styleSheets[o].rules||document.styleSheets[o].cssText)}catch(e){}!function(){for(var e=l()("[data-responsive-image],[responsive-image]"),t=0,n=e.length;t<n;t++)d(e[t])}()},this.findElementQueriesElements=function(e){!function(e){var t=l(e);for(var i in n)if(n.hasOwnProperty(i))for(var o=t(i,e),r=0,s=o.length;r<s;r++)a(o[r],i)}(e)},this.update=function(){this.init()}};t.update=function(){t.instance.update()},t.detach=function(e){e.elementQueriesSetupInformation?(e.elementQueriesSensor.detach(),delete e.elementQueriesSetupInformation,delete e.elementQueriesSensor):e.resizeSensorInstance&&(e.resizeSensorInstance.detach(),delete e.resizeSensorInstance)},t.init=function(){t.instance||(t.instance=new t),t.instance.init()};return t.findElementQueriesElements=function(e){t.instance.findElementQueriesElements(e)},t.listen=function(){!function(e){if(document.addEventListener)document.addEventListener("DOMContentLoaded",e,!1);else if(/KHTML|WebKit|iCab/i.test(navigator.userAgent))var t=setInterval((function(){/loaded|complete/i.test(document.readyState)&&(e(),clearInterval(t))}),10);else window.onload=e}(t.init)},t})?i.apply(t,o):i)||(e.exports=r)},87:function(e,t,n){"use strict";var i,o;"undefined"!=typeof window&&window,void 0===(o="function"==typeof(i=function(){if("undefined"==typeof window)return null;var e="undefined"!=typeof window&&window.Math==Math?window:"undefined"!=typeof self&&self.Math==Math?self:Function("return this")(),t=e.requestAnimationFrame||e.mozRequestAnimationFrame||e.webkitRequestAnimationFrame||function(t){return e.setTimeout(t,20)},n=e.cancelAnimationFrame||e.mozCancelAnimationFrame||e.webkitCancelAnimationFrame||function(t){e.clearTimeout(t)};function i(e,t){var n=Object.prototype.toString.call(e),i="[object Array]"===n||"[object NodeList]"===n||"[object HTMLCollection]"===n||"[object Object]"===n||"undefined"!=typeof jQuery&&e instanceof jQuery||"undefined"!=typeof Elements&&e instanceof Elements,o=0,r=e.length;if(i)for(;o<r;o++)t(e[o]);else t(e)}function o(e){if(!e.getBoundingClientRect)return{width:e.offsetWidth,height:e.offsetHeight};var t=e.getBoundingClientRect();return{width:Math.round(t.width),height:Math.round(t.height)}}function r(e,t){Object.keys(t).forEach((function(n){e.style[n]=t[n]}))}var s=function(e,a){var u=0;function l(){var e,t,n=[];this.add=function(e){n.push(e)},this.call=function(i){for(e=0,t=n.length;e<t;e++)n[e].call(this,i)},this.remove=function(i){var o=[];for(e=0,t=n.length;e<t;e++)n[e]!==i&&o.push(n[e]);n=o},this.length=function(){return n.length}}function d(e,n){if(e)if(e.resizedAttached)e.resizedAttached.add(n);else{e.resizedAttached=new l,e.resizedAttached.add(n),e.resizeSensor=document.createElement("div"),e.resizeSensor.dir="ltr",e.resizeSensor.className="resize-sensor";var i={pointerEvents:"none",position:"absolute",left:"0px",top:"0px",right:"0px",bottom:"0px",overflow:"hidden",zIndex:"-1",visibility:"hidden",maxWidth:"100%"},s={position:"absolute",left:"0px",top:"0px",transition:"0s"};r(e.resizeSensor,i);var a=document.createElement("div");a.className="resize-sensor-expand",r(a,i);var d=document.createElement("div");r(d,s),a.appendChild(d);var c=document.createElement("div");c.className="resize-sensor-shrink",r(c,i);var h=document.createElement("div");r(h,s),r(h,{width:"200%",height:"200%"}),c.appendChild(h),e.resizeSensor.appendChild(a),e.resizeSensor.appendChild(c),e.appendChild(e.resizeSensor);var m=window.getComputedStyle(e),f=m?m.getPropertyValue("position"):null;"absolute"!==f&&"relative"!==f&&"fixed"!==f&&"sticky"!==f&&(e.style.position="relative");var p=!1,v=0,y=o(e),g=0,w=0,S=!0;u=0;var x=function(){if(S){if(0===e.offsetWidth&&0===e.offsetHeight)return void(u||(u=t((function(){u=0,x()}))));S=!1}var n,i;n=e.offsetWidth,i=e.offsetHeight,d.style.width=n+10+"px",d.style.height=i+10+"px",a.scrollLeft=n+10,a.scrollTop=i+10,c.scrollLeft=n+10,c.scrollTop=i+10};e.resizeSensor.resetSensor=x;var E=function(){v=0,p&&(g=y.width,w=y.height,e.resizedAttached&&e.resizedAttached.call(y))},b=function(){y=o(e),(p=y.width!==g||y.height!==w)&&!v&&(v=t(E)),x()},z=function(e,t,n){e.attachEvent?e.attachEvent("on"+t,n):e.addEventListener(t,n)};z(a,"scroll",b),z(c,"scroll",b),u=t((function(){u=0,x()}))}}i(e,(function(e){d(e,a)})),this.detach=function(t){u||(n(u),u=0),s.detach(e,t)},this.reset=function(){e.resizeSensor.resetSensor()}};if(s.reset=function(e){i(e,(function(e){e.resizeSensor.resetSensor()}))},s.detach=function(e,t){i(e,(function(e){e&&(e.resizedAttached&&"function"==typeof t&&(e.resizedAttached.remove(t),e.resizedAttached.length())||e.resizeSensor&&(e.contains(e.resizeSensor)&&e.removeChild(e.resizeSensor),delete e.resizeSensor,delete e.resizedAttached))}))},"undefined"!=typeof MutationObserver){var a=new MutationObserver((function(e){for(var t in e)if(e.hasOwnProperty(t))for(var n=e[t].addedNodes,i=0;i<n.length;i++)n[i].resizeSensor&&s.reset(n[i])}));document.addEventListener("DOMContentLoaded",(function(e){a.observe(document.body,{childList:!0,subtree:!0})}))}return s})?i.call(t,n,t,e):i)||(e.exports=o)}},t={};function n(i){var o=t[i];if(void 0!==o)return o.exports;var r=t[i]={exports:{}};return e[i].call(r.exports,r,r.exports,n),r.exports}(()=>{"use strict";var e=function(){function e(){}return e.prototype.findBestColumn=function(e,t,n,i,o){var r=i.length,s=i.reduce((function(t,n,i,o){if(i+e>r)return t.push(-1),t;for(var s=-1,a=i;a<e+i;a++)s=Math.max(s,o[a]);return t.push(s),t}),[]).reduce((function(e,t,n){return e?t<e.yUnits-o&&-1!==t?{xColumns:n,yUnits:t}:e:{xColumns:n,yUnits:t}}),null);return s.element=t,s},e}(),t=function(){function t(t,n,i,o){if(void 0===i&&(i=12),void 0===o&&(o=0),this.columns=12,this.threshold=40,this.columnBottoms=[],t.renderer){var r=t;this.renderer=r.renderer,this.containerWidth=r.containerWidth,this.columns=r.columns,this.threshold=r.threshold,this.packer=r.packer||new e}else this.renderer=t,this.containerWidth=n,this.columns=i,this.threshold=o,this.packer=new e;for(;this.columnBottoms.length<this.columns;)this.columnBottoms.push(0);this.renderer.setColumns(i)}return t.prototype.findBestColumn=function(e,t,n){return this.packer.findBestColumn(e,t,n,this.columnBottoms,this.threshold)},t.prototype.fit=function(e){var t=this,n=[],i=0;return e.forEach((function(e,o){var r=t.renderer.getElementWidth(e),s=t.renderer.getElementHeight(e),a=Math.round(r/t.containerWidth*t.columns);a>t.columns&&(a=t.columns);for(var u=t.findBestColumn(a,e,o),l=u.xColumns,d=l+a,c=l;c<d;c++)t.columnBottoms[c]=u.yUnits+s;n.push(u),i=Math.max(i,s+u.yUnits)})),{coords:n,totalHeight:i}},t.prototype.layout=function(e){var t=this,n=this.fit(e);return n.coords.forEach((function(e){t.renderer.setPosition(e.element,e.xColumns,e.yUnits)})),n.totalHeight},t}(),i=function(){function e(){}return e.prototype.setColumns=function(e){this.columns=e},e.prototype.getElementWidth=function(e){return e.offsetWidth},e.prototype.getElementHeight=function(e){return e.offsetHeight},e.prototype.setPosition=function(e,t,n){e.style.insetInlineStart=t/this.columns*100+"%",e.style.top=n+"px"},e}(),o=function(){function e(){}return e.prototype.findBestColumn=function(e,t,n,i,o){var r=e*n%i.length;return{xColumns:r,yUnits:i[r],element:t}},e}(),r=n(843),s=!1;function a(){const n=document.querySelector(".mason-container"),r=n.offsetWidth,a=[].slice.call(n.querySelectorAll("div.mason-brick")),u={containerWidth:r,renderer:new i,threshold:40,columns:12,packer:s?new o:new e},l=new t(u).layout(a);n.style.minHeight=l+"px"}function u(){var e=document.getElementById("expandableExample");e.style.height="auto",e.removeEventListener("transitionend",u)}a(),new r.ResizeSensor(document.querySelector(".mason-container").querySelectorAll("div.mason-brick"),(function(){a()})),document.getElementById("expandableExample").querySelector("button").addEventListener("click",(function(){!function(){const e=document.getElementById("expandableExample");if("400px"!==e.style.height){const t=window.getComputedStyle(e,null).height;e.setAttribute("data-auto-height",t),e.style.height=t,setTimeout((function(){e.style.height="400px"}))}else{const t=e.getAttribute("data-auto-height");e.style.height=t,e.addEventListener("transitionend",u)}}()})),document.getElementById("useSimple").addEventListener("change",(function(e){s=e.target.checked,a()}))})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,